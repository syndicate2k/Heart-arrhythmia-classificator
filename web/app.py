import sys
import os
import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import tensorflow as tf
import yaml
from joblib import load
from tensorflow.keras.models import load_model
from utils import predict_sample, get_model_accuracy, sample_test_classes

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from src.preprocessing import load_data, split_data, normalize_data

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open('config/config.yaml', 'r', encoding='utf-8') as file:
    config = yaml.safe_load(file)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data(file_path):
    return pd.read_csv(file_path, header=None)

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
@st.cache_resource
def load_models(model_dir):
    models = {}
    for model_file in os.listdir(model_dir):
        if model_file.endswith('.joblib'):
            model_path = os.path.join(model_dir, model_file)
            models[model_file] = load(model_path)
        elif model_file.endswith('.h5'):
            model_path = os.path.join(model_dir, model_file)
            models[model_file] = load_model(model_path)
    return models

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≠–ö–ì
def plot_signal_with_plotly(X):
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É
    fig = go.Figure()

    # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ —Ñ–∏–≥—É—Ä—É
    fig.add_trace(go.Scatter(
        y=X.iloc[0],
        mode='lines'
    ))

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫–µ—Ç —Ñ–∏–≥—É—Ä—ã
    fig.update_layout(
        title='–°–∏–≥–Ω–∞–ª –≠–ö–ì',
        xaxis_title='–ò–Ω–¥–µ–∫—Å',
        yaxis_title='–ó–Ω–∞—á–µ–Ω–∏–µ',
        showlegend=False,
        plot_bgcolor='rgba(0,0,0,0)',
        paper_bgcolor='rgba(0,0,0,0)',
        font=dict(color='darkblue')
    )

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    st.plotly_chart(fig)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    st.set_page_config(page_title="Arrhythmia Detector", layout="wide")

    # CSS —Å—Ç–∏–ª–∏
    st.markdown("""
    <style>
    .main {
        background-color: #e6f3ff;
        font-family: 'Arial', sans-serif;
    }
    .stButton>button {
        background-color: #4CAF50;
        color: white;
        font-family: 'Arial', sans-serif;
    }
    .stSelectbox, .stSlider {
        font-family: 'Arial', sans-serif;
    }
    .stMarkdown {
        font-family: 'Arial', sans-serif;
    }
    hr.style {
        border: 0;
        height: 1px;
        background: #333;
        background-image: linear-gradient(to right, #ccc, #333, #ccc);
    }
    .column {
        border-right: 1px solid #ccc;
    }
    .column:last-child {
        border-right: none;
    }
    .title {
        font-size: 2.5em !important;
        text-align: center !important;
    }
    </style>
    """, unsafe_allow_html=True)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown("<h1 class='title'>–ü—Ä–æ–≤–µ—Ä–∫–∞ –≠–ö–ì –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞—Ä–∏—Ç–º–∏–∏ ‚ù§Ô∏èü©∫</h1>", unsafe_allow_html=True)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–∏ —Ä–∞–∑–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—è
    st.markdown("<hr class='hr-style'>", unsafe_allow_html=True)

    # –í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data_source = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:", ("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ", "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª"))

    if data_source == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ":
        data = sample_test_classes(load_data(config['data']['test_data_path']))
        show_slider = True
    else:
        uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –≠–ö–ì", type=["csv"])
        if uploaded_file is not None:
            data = load_data(uploaded_file)
            if data.shape[1] != 187:
                st.error("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 187 —Å—Ç–æ–ª–±—Ü–æ–≤.")
                return
            show_slider = False
        else:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏.")
            return

    # –ú–µ—Ç–∫–∏ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –ø—Ä–µ–¥. –∫–ª–∞—Å—Å–∞
    class_labels = config['class_labels']

    col1, col2 = st.columns([1, 1])

    with col1:
        st.markdown('<div class="column">', unsafe_allow_html=True)
        st.header("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞")

        # –°–ª–∞–π–¥–µ—Ä
        if show_slider:
            row_index = st.slider("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏", 1, len(data), 1)
        else:
            row_index = 1
        
        row_index -= 1

        if row_index < len(data):
            row_data = data.iloc[row_index]
            if data_source == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ":
                X, y = split_data(pd.DataFrame([row_data]))
            else:
                X = pd.DataFrame([row_data])
                y = None  # –∫–æ—Å—Ç—ã–ª—å 

            plot_signal_with_plotly(X)
        else:
            st.error("–í—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
        st.markdown('</div>', unsafe_allow_html=True)

    with col2:
        st.markdown('<div class="column">', unsafe_allow_html=True)
        st.header("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ")

        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
        models = load_models(config['models']['model_dir'])

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –≤–∏–¥–µ
        model_files = [file.split('.')[0].upper() for file in config['models']['model_files']]

        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
        model_file_display = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å", options=model_files)

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        model_file = config['models']['model_files'][model_files.index(model_file_display)]

        model = models[model_file]

        # –ö–æ—Å—Ç—ã–ª—å, –ø–∞—Ä—Å–∏–º –∏–º—è –º–æ–¥–µ–ª–∏ –¥–æ —Ç–æ—á–∫–∏
        model_name = model_file.split('.')[0]

        # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        scaler = load(config['preprocessing']['scaler_path'])
        X_normalized, _ = normalize_data(X, scaler)

        # –ü—Ä–µ–¥–∏–∫—Ç
        if st.button("Predict"):
            y_pred, y_true = predict_sample(model, X_normalized, y)
            accuracy = get_model_accuracy(model_name, config)

            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            results = pd.DataFrame({
                "–ú–µ—Ç—Ä–∏–∫–∞": ["–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ", "–ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è", "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è"],
                "–ó–Ω–∞—á–µ–Ω–∏–µ": [
                    f"{accuracy * 100:.2f}%",
                    class_labels[y_pred],
                    class_labels[y_true] if y_true is not None else "N/A"
                ]
            })

            # –†–∏—Å—É–µ–º —Ç–∞–±–ª–∏—Ü—É
            st.table(results)
        st.markdown('</div>', unsafe_allow_html=True)

    # –ì–æ—Ä. –ª–∏–Ω–∏—è –≤–Ω–∏–∑—É
    st.markdown("<hr class='hr-style'>", unsafe_allow_html=True)

if __name__ == "__main__":
    main()